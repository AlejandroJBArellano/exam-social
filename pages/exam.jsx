import Head from 'next/head';
import { useState } from 'react';
import { AnimatePresence } from 'framer-motion';
import { Header } from '../components/landing';
import { ZoomIn, ZoomOut } from '../components/Animations';
import { ExamFinished, Exam, Timeout } from '../components/exam';

const ExamData = [
  {
    question: 'Question 1',
    options: [
      {
        answer: 'option 1',
        isCorrect: false,
      },
      {
        answer: 'option 2',
        isCorrect: false,
      },
      {
        answer: 'option 3',
        isCorrect: false,
      },
      {
        answer: 'option 4',
        isCorrect: true,
      },
    ],
  },
  {
    question: 'Question 2',
    options: [
      {
        answer: 'option 1',
        isCorrect: false,
      },
      {
        answer: 'option 2',
        isCorrect: false,
      },
      {
        answer: 'option 3',
        isCorrect: false,
      },
      {
        answer: 'option 4',
        isCorrect: true,
      },
    ],
  },
  {
    question: 'Question 3',
    options: [
      {
        answer: 'option 1',
        isCorrect: false,
      },
      {
        answer: 'option 2',
        isCorrect: false,
      },
      {
        answer: 'option 3',
        isCorrect: false,
      },
      {
        answer: 'option 4',
        isCorrect: true,
      },
    ],
  },
  {
    question: 'Question 4',
    options: [
      {
        answer: 'option 1',
        isCorrect: false,
      },
      {
        answer: 'option 2',
        isCorrect: false,
      },
      {
        answer: 'option 3',
        isCorrect: false,
      },
      {
        answer: 'option 4',
        isCorrect: true,
      },
    ],
  },
];

export default function ExamPage() {
  const [isTimeout, setIsTimeout] = useState(false);
  const [activeQuestion, setActiveQuestion] = useState(0);
  const [results, setResults] = useState([]);

  const nextQuestion = () => setActiveQuestion(activeQuestion + 1);
  const setAnswer = (result, index) => {
    const oldResults = results;
    oldResults[index] = result;
    setResults(oldResults);
  };

  const questions = results.length;
  const correctQuestions = results.filter((result) => result === true).length;
  const isExamFinished = Boolean(activeQuestion >= ExamData.length);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-tertiary-light">
        <Header />
        <AnimatePresence mode="wait">
          {
            Boolean(!isTimeout && !isExamFinished)
            && (
            <ZoomOut key="1">
              <Exam
                setIsTimeout={setIsTimeout}
                isExamFinished={isExamFinished}
                ExamData={ExamData}
                nextQuestion={nextQuestion}
                setAnswer={setAnswer}
                activeQuestion={activeQuestion}
              />
            </ZoomOut>
            )
          }
          {
            isExamFinished
            && (
              <ExamFinished
                questions={questions}
                correctQuestions={correctQuestions}
              />
            )
          }
          {
            Boolean(isTimeout && !isExamFinished)
            && (
              <ZoomIn>
                <Timeout />
              </ZoomIn>
            )
          }
        </AnimatePresence>
      </main>
    </>
  );
}
